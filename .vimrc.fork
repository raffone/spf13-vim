" General {
	set noswapfile
	set nobackup
	set nowb
	set nospell
	set visualbell
	set autowrite
" }

" Vim UI {


	if has('gui_running')
		let base16colorspace=256
		color base16-default-bright
	else
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"
        color solarized
	endif

	"set gcr=n:hor10-Cursor/lCursor				" Underline cursor in normal mode
	"set gcr=a:blinkon0							" Disable cursor blink

	"hi! SpecialKey guibg=bg gui=underline
	hi! MatchParen guibg=bg guifg=#fcffea gui=underline
	hi! clear CursorLineNr guifg=#b0b0b0

" }

" Formatting {

    set shiftwidth=2                " Use indents of 4 spaces
    set tabstop=2                   " An indentation every four columns
    set softtabstop=2               " Let backspace delete indent
	set timeoutlen=1000 ttimeoutlen=0

" }

" Key (re)Mappings {

    " Duplicate line
	nnoremap <Leader>dd 	Yp
	nnoremap <C-D>			Yp

	" Comment current line
	nnoremap <C-S-C>		gcc
	nnoremap <Leader>cc 	gcc


"" 	" Toggle NerdTree
"" 	map <Leader>b 		:NERDTreeTabsToggle<CR>
"" 	map <Leader>bf 		:NERDTreeFind<CR>
"" 	map <Leader>bc 		:NERDTreeFind<CR>pC
""
"" 	map <C-B> 			:NERDTreeTabsToggle<CR>
""
	" TABS
	nnoremap <Leader>tt 		:tabnew<CR>
	nnoremap <Leader>tg 		:tabclose<CR>
	nnoremap <Leader>tr 		:tabp<CR>
	nnoremap <Leader>ty 		:tabn<CR>

	nnoremap <C-S-Up>  			:tabnew<CR>
	nnoremap <C-S-Down>  		:tabclose<CR>
	nnoremap <D-A-Left> 		:tabp<CR>
	nnoremap <D-A-Right> 		:tabn<CR>

 	" WINDOWS

 	nnoremap <Leader>ww 		:vs<CR>
 	nnoremap <Leader>ws 		:clo<CR>
 	nnoremap <Leader>wq 		:wincmd h<CR>
 	nnoremap <Leader>we 		:wincmd l<CR>
 	nnoremap <Leader>wa 		:wincmd w<CR>

 	nnoremap <C-A-Up> 			:wincmd k<CR>
 	nnoremap <C-A-Down> 		:wincmd j<CR>
 	nnoremap <C-A-Left> 		:wincmd h<CR>
 	nnoremap <C-A-Right> 		:wincmd l<CR>

 	nnoremap <C-A-Del> 			:clo<CR>
 	nnoremap <C-A-Home> 		:ZoomWin<CR>

 	nnoremap <C-A-PageUp> 		:vs<CR>
 	nnoremap <C-A-PageDown> 	:sp<CR>

""
"" 	" Cerca

	nnoremap <D-f> 			/
 	nnoremap <D-F> 			:Ack<Space>

"" 	map <C-S-F> 		:%s///g
"" 	"map <C-S-F> 		<F4>
""
""

 	" ctrlp.vim

 	" let g:ctrlp_match_window = 'top,order:ttb,min:1,max:10,results:10'

 	let g:ctrlp_reuse_window = 'netrw\|help\|quickfix\|NERD'
	" let g:ctrlp_map = '<c-p>'
	" let g:ctrlp_cmd = 'CtrlPLastMode'

 	nnoremap <Leader>p 		:CtrlP .<CR>
 	"nnoremap <Leader>p 		:CtrlPLastMode<CR>
	"nnoremap <D-p> 			:CtrlPLastMode<CR>

    "nnoremap <silent> <D-t> :CtrlP<CR>
    "nnoremap <silent> <D-r> :CtrlPMRU<CR>

""  map <D-r> 			:CtrlPLastMode<CR>


""
"" 	" Switch buffer
""
"" 	" map <Leader>pv 		:bnext<cr>
"" 	" map <Leader>bn 		:bprevious<cr>
"" 	" map <Leader>bb 		:bd<cr>
""
"" 	" map <C-Tab> 		:bnext<cr>
"" 	" map <C-S-Tab> 		:bprevious<cr>
""
"" 	" Refresh browser
"" 	"map <f5> 			:RRB<CR>
""
"" 	" Reindent
"" 	map <F8> 			mzgg=G`z<CR>
""
"" 	" Convert spaces to tabs
"" 	" map <leader>````	:%s/    /	/g<CR>
"" 	" map <leader>``		:%s/  /	/g<CR>
""
 	" Fold current block
 	" map <F9> za
	nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
	vnoremap <Space> zf

"" 	" Toggle paste indent
"" 	" nnoremap <F5> :set invpaste paste?<CR>
"" 	" set pastetoggle=<F5>

 	" Search current selected text
	vmap <C-S-G> 		yq/p<cr>

""
"" 	map <leader>````    :%s/    /	/g<CR>		" Convert 4 spaces to 1 tab
"" 	map <leader>```    	:%s/   /	/g<CR>		" Convert 3 spaces to 1 tab
"" 	map <leader>``      :%s/  /	/g<CR>			" Convert 2 spaces to 1 tab

  " Allways start from the beginning of a word on change and delete
	noremap cw 	bcw
	noremap dw 	bdw
	nnoremap Y Y

" }

" GUI Settings {

	if has('gui_running')
		"if has("gui_mac")
			set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h11
		"endif
		if has('gui_macvim')
			set transparency=0      " Make the window opaque
		endif
	endif

" }

" indent_guides {
	let g:indent_guides_start_level = 1
	let g:indent_guides_auto_colors = 0

	hi! IndentGuidesOdd  guibg=bg
	hi! IndentGuidesEven guibg=#202020
" }


" neocomplcache {

	if count(g:spf13_bundle_groups, 'neocomplcache')

		if !exists('g:neocomplcache_disabled_sources_list')
		  let g:neocomplcache_disabled_sources_list = {}
		endif

		let g:neocomplcache_disabled_sources_list.sass = ['omni_complete']
		let g:neocomplcache_enable_auto_select = 1

		let g:neosnippet#snippets_directory='~/.vim/bundle/sass-compass-neosnippet/snippets'

		imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<CR><TAB>" : "\<TAB>"
		smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
	endif

" }

" UnBundle {
	UnBundle "honza/vim-snippets"
	UnBundle "majutsushi/tagbar"
" }