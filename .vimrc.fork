" General {
	set noswapfile
	set nobackup
	set nowb
	set nospell
	set visualbell
" }

" Vim UI {


	if has('gui_running')
		let base16colorspace=256
		color base16-default-bright
	else
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"
        color solarized
	endif

	set gcr=n:hor10-Cursor/lCursor				" Underline cursor in normal mode
	set gcr=a:blinkon0							" Disable cursor blink

	"hi! SpecialKey guibg=bg gui=underline
	hi! MatchParen guibg=bg guifg=#fcffea gui=underline
	hi! clear CursorLineNr guifg=#b0b0b0

" }

" Formatting {
	set noexpandtab
	set listchars=tab:\ \ ,trail:•
	autocmd FileType css,scss,sass autocmd BufWritePre <buffer> call StripTrailingWhitespace()
" }

" Key (re)Mappings {


	" Duplicate line
	nmap <Leader>dd 	Yp
	nmap <C-D>			Yp

	" Comment current line
	nmap <C-S-C>		gcc
	nmap <Leader>cc 	gcc


	" Toggle NerdTree
	map <Leader>b 		:NERDTreeTabsToggle<CR>
	map <Leader>bf 		:NERDTreeFind<CR>
	map <Leader>bc 		:NERDTreeFind<CR>pC

	map <C-B> 			:NERDTreeTabsToggle<CR>

	" TABS
	map <Leader>tt 		:tabnew<CR>
	map <Leader>tg 		:tabclose<CR>
	map <Leader>tr 		:tabp<CR>
	map <Leader>ty 		:tabn<CR>

	map <C-S-Up>  		:tabnew<CR>
	map <C-S-Down>  	:tabclose<CR>
	map <C-S-Left> 		:tabp<CR>
	map <C-S-Right> 	:tabn<CR>

	" WINDOWS

	map <Leader>ww 		:vs<CR>
	map <Leader>ws 		:clo<CR>
	map <Leader>wq 		:wincmd h<CR>
	map <Leader>we 		:wincmd l<CR>
	map <Leader>wa 		:wincmd w<CR>

	map <C-A-Up> 		:wincmd k<CR>
	map <C-A-Down> 		:wincmd j<CR>
	map <C-A-Left> 		:wincmd h<CR>
	map <C-A-Right> 	:wincmd l<CR>

	map <C-A-Del> 		:clo<CR>
	map <C-A-Home> 		:ZoomWin<CR>

	map <C-A-PageUp> 	:vs<CR>
	map <C-A-PageDown> 	:sp<CR>


	" Cerca
	map <C-F> 			:Ack<Space>
	map <C-S-F> 		:%s///g
	"map <C-S-F> 		<F4>


	" ctrlp.vim
	let g:ctrlp_map = ''
	map <Leader>p 		:CtrlP<CR>
	map <Leader>pp 		:CtrlP .<CR>
	map <C-P> 			:CtrlP .<CR>

	" Switch buffer

	" map <Leader>pv 		:bnext<cr>
	" map <Leader>bn 		:bprevious<cr>
	" map <Leader>bb 		:bd<cr>

	" map <C-Tab> 		:bnext<cr>
	" map <C-S-Tab> 		:bprevious<cr>

	" Refresh browser
	"map <f5> 			:RRB<CR>

	" Reindent
	map <F8> 			mzgg=G`z<CR>

	" Convert spaces to tabs
	" map <leader>````	:%s/    /	/g<CR>
	" map <leader>``		:%s/  /	/g<CR>

	" Fold current block
	" map <F9> za
	" nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
	" vnoremap <Space> zf

	" Toggle paste indent
	" nnoremap <F5> :set invpaste paste?<CR>
	" set pastetoggle=<F5>

	" Search current selected text
	vmap <C-S-G> 		yq/p<cr>

	map <leader>````    :%s/    /	/g<CR>		" Convert 4 spaces to 1 tab
	map <leader>```    	:%s/   /	/g<CR>		" Convert 3 spaces to 1 tab
	map <leader>``      :%s/  /	/g<CR>			" Convert 2 spaces to 1 tab



" }

" GUI Settings {

	if has('gui_running')
		"if has("gui_mac")
			set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h11
		"endif
		if has('gui_macvim')
			set transparency=0      " Make the window opaque
		endif
	endif

" }

" indent_guides {
	let g:indent_guides_start_level = 1
	let g:indent_guides_auto_colors = 0

	hi! IndentGuidesOdd  guibg=bg
	hi! IndentGuidesEven guibg=#202020
" }


" neocomplcache {

	if count(g:spf13_bundle_groups, 'neocomplcache')

		if !exists('g:neocomplcache_disabled_sources_list')
		  let g:neocomplcache_disabled_sources_list = {}
		endif

		let g:neocomplcache_disabled_sources_list.sass = ['omni_complete']
		let g:neocomplcache_enable_auto_select = 1

		let g:neosnippet#snippets_directory='~/.vim/bundle/sass-compass-neosnippet/snippets'

		imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<CR><TAB>" : "\<TAB>"
		smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
	endif

" }

" UnBundle {
	UnBundle "honza/vim-snippets"
	UnBundle "majutsushi/tagbar"
" }

